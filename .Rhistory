install.packages("microbenchmark")
install.packages("benchmarkme")
install.packages("profvis")
packrat::snapshot(prompt = FALSE)
source('~/R/Notes/R_Efficient_code/Notes.R', echo=TRUE)
play <- function(){
while (total < 10) {
total <- total + sample(1:6, 1)
if (total %% 2 == 0) {
total <- 0
# If even. Reset to 0
no_of_rolls <- no_of_rolls + 1
}
no_of_rolls
}
}
results <- numeric(100)
for (i in seq_along(results)) {
results[i] <- play()
}
# Yes, this is embarrassingly parallel. We can simulate the games in any order.
# -----------------------------------Moving to parApply
library("parallel")
# Create a cluster using makeCluster().
# Do some work.
# Stop the cluster using stopCluster().
dd = matrix(rnorm(1000), ncol = 10)
# Determine the number of available cores
detectCores()
# Create a cluster via makeCluster
cl <- makeCluster(2)
# Parallelize this code
parApply(cl,dd, 2, median)
# Stop the cluster
stopCluster(cl)
# -----------------------------------The parallel package - parSapply
play <- function() {
total <- no_of_rolls <- 0
while (total < 10) {
total <- total + sample(1:6, 1)
# If even. Reset to 0
if (total %% 2 == 0) total <- 0
no_of_rolls <- no_of_rolls + 1
}
no_of_rolls
}
# Create a cluster via makeCluster (2 cores)
cl <- makeCluster(2)
# Export the play() function to the cluster
clusterExport(cl, "play")
# Parallelize this code
res <- parSapply(cl, 1:100, function(i) play())
# Stop the cluster
stopCluster(cl)
# ----------------------------------- Timings parSapply()
# Set the number of games to play
no_of_games <- 1e5
## Time serial version
system.time(serial <- sapply(1:no_of_games, function(i) play()))
## Set up cluster
cl <- makeCluster(3)
clusterExport(cl, "play")
## Time parallel version
system.time(par <- parSapply(cl, 1:no_of_games, function(i) play()))
## Stop cluster
stopCluster(cl)
# use the microbechmark to get the time execution
microbenchmark(serial, par, times = 1)
